// 
//  Copyright © 2015 Claus Christmann <hcc |ä| gatech.edu>.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
// 
//  ----
// 
//  This is a blunt copy-past from http://www.batcom-it.net/?p=59, 
//  posted in 2008 by René Reucher 
//  
//  

#ifndef JOYSTICK_H
#define JOYSTICK_H

#include <QtCore/QObject>
#include <QtCore/QMap>
#include <QtCore/QTime>
#include <QtCore/QTimer>
#include <QtCore/QStringList>

#include <SDL/SDL.h>

#define SDL_JOYSTICK_DEFAULT_EVENT_TIMEOUT      25
#define SDL_JOYSTICK_DEFAULT_AUTOREPEAT_DELAY  250


/** \brief A Simple DirectMedia Layer (SDL) Jostick 
 * This class provides a basic Qt interface to a connected joystick via the SDL
 * library.
 * 
 * \sa http://www.libsdl.org
 */
class Joystick : public QObject
{
  Q_OBJECT

  private:
    int numAxes = 0; ///< \brief The number of axes.
    int numButtons = 0;///< \brief The number of buttons.
    int numHats = 0; ///< \brief The number of hat switches.
    int numTrackballs = 0; ///< \brief The number of trackballs.
  
  public:
    /** \brief A list of names of all (SDL) accissble joysticks. 
     * Generated by the constructor.
     */
    QStringList joystickNames; 
    SDL_Joystick *joystick = nullptr; ///< \brief The joystick this class is currently bound to.
    const int& numberOfAxes; ///< \brief The number of axes (read-only).
    const int& numberOfButtons;///< \brief The number of buttons (read-only).
    const int& numberOfHats; ///< \brief The number of hat switches (read-only).
    const int& numberOfTrackballs; ///< \brief The number of trackballs (read-only).
    int eventTimeout; ///< \brief Polling rate of the joystick state, in [ms].
    bool autoRepeat; ///< \brief Flag whether or not continuous identical states will be (re-)announced.
    int autoRepeatDelay; ///< \brief Time period after which an identical state will be (re-)announced, in [ms].
    QTimer joystickTimer;
    QMap<int, int> deadzones; ///< \brief Center stick deadband region.
    QMap<int, int> sensitivities;///< \brief Delta threshold for detecting a stick change relative to the last check.

    /** \brief Constructor
     * Opens the SDL interface and queries available joysticks. The names of the
     * available joysticks are in joystickNames
     */
    Joystick(QObject *parent = 0,
             bool doAutoRepeat = true,
             int autoRepeatDelay = SDL_JOYSTICK_DEFAULT_AUTOREPEAT_DELAY,
             int joystickEventTimeout = SDL_JOYSTICK_DEFAULT_EVENT_TIMEOUT);
    ~Joystick();
    bool open(int); ///< \brief Bind this Joystick class to the given SDL Joystick.
    void close(); ///< \brief Unbind from SDL Joystick
    bool isOpen() { return joystick != NULL; }
    int getAxisValue(int axis);



  private:
    QMap<int, Sint16> axes;
    QMap<int, Uint8> buttons;
    QMap<int, Uint8> hats;
    QMap<int, QTime> axisRepeatTimers;
    QMap<int, QTime> buttonRepeatTimers;
    QMap<int, QTime> hatRepeatTimers;

  signals:
    void axisValueChanged(int axis, int value);
    void buttonValueChanged(int button, bool value);
    void hatValueChanged(int hat, int value);
    void trackballValueChanged(int trackball, int deltaX, int deltaY);

  public slots:
    void processEvents();
};


#endif // JOYSTICK_H
